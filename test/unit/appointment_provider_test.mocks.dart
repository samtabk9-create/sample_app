// Mocks generated by Mockito 5.4.4 from annotations
// in appointment_booking_app/test/unit/appointment_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:appointment_booking_app/domain/entities/appointment.dart'
    as _i4;
import 'package:appointment_booking_app/domain/repositories/appointment_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AppointmentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppointmentRepository extends _i1.Mock
    implements _i2.AppointmentRepository {
  MockAppointmentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Appointment>> getAllAppointments() => (super.noSuchMethod(
        Invocation.method(
          #getAllAppointments,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.Appointment>>.value(<_i4.Appointment>[]),
      ) as _i3.Future<List<_i4.Appointment>>);

  @override
  _i3.Future<List<_i4.Appointment>> getAppointmentsByDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppointmentsByDateRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue:
            _i3.Future<List<_i4.Appointment>>.value(<_i4.Appointment>[]),
      ) as _i3.Future<List<_i4.Appointment>>);

  @override
  _i3.Future<_i4.Appointment?> getAppointmentById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppointmentById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Appointment?>.value(),
      ) as _i3.Future<_i4.Appointment?>);

  @override
  _i3.Future<String> createAppointment(_i4.Appointment? appointment) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAppointment,
          [appointment],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #createAppointment,
            [appointment],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> updateAppointment(_i4.Appointment? appointment) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAppointment,
          [appointment],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAppointment(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAppointment,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Appointment>> searchAppointments(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchAppointments,
          [query],
        ),
        returnValue:
            _i3.Future<List<_i4.Appointment>>.value(<_i4.Appointment>[]),
      ) as _i3.Future<List<_i4.Appointment>>);
}
